import React, { useEffect, useRef, useState } from "react";
import Prism from "prismjs";
import "prismjs/components/prism-javascript";
import "prismjs/components/prism-diff";
import "prismjs/themes/prism-tomorrow.css"; // pick any theme

// ----- demo diff snapshots (could be generated by your agent) -----
const frames = [
`diff
- // TODO: handle errors
- fetch('/api/data').then(res => res.json())
+ try {
+   const data = await fetchJSON('/api/data')
+   console.log(data)
+ } catch (e) {
+   console.error('Fetch failed', e)
+ }`,
`diff
- const total = items.map(i => i.price).reduce((a,b)=>a+b)
+ const total = items.reduce((sum, {price}) => sum + price, 0)
+ console.table({ total })`
];

export default function DynamicCode({ cycle = 5000, className = "" }) {
  const codeRef = useRef(null);
  const [index, setIndex] = useState(0);

  // highlight whenever the frame changes
  useEffect(() => {
    Prism.highlightElement(codeRef.current);
  }, [index]);

  // rotate frames, respecting prefers-reduced-motion
  useEffect(() => {
    if (typeof window === "undefined") return;
    
    const reduce = window.matchMedia("(prefers-reduced-motion: reduce)")
      ?.matches;
    if (reduce) return;          // static for motion-sensitive users

    const id = setInterval(
      () => setIndex(i => (i + 1) % frames.length),
      cycle
    );
    return () => clearInterval(id);
  }, [cycle]);

  return (
    <pre className={`${className} rounded-xl overflow-hidden text-sm font-mono bg-gray-800`}>
      <code ref={codeRef} className="language-diff">
        {frames[index]}
      </code>
    </pre>
  );
} 